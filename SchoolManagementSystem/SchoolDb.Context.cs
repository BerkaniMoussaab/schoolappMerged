//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchoolManagementSystem
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SchoolMgtDbEntities : DbContext
    {
        public SchoolMgtDbEntities()
            : base("name=SchoolMgtDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AbsenceTable> AbsenceTable { get; set; }
        public virtual DbSet<AnnualTable> AnnualTable { get; set; }
        public virtual DbSet<ClassSubjectTable> ClassSubjectTable { get; set; }
        public virtual DbSet<ClassTable> ClassTable { get; set; }
        public virtual DbSet<DesignationTable> DesignationTable { get; set; }
        public virtual DbSet<EmailsToAllStaffs> EmailsToAllStaffs { get; set; }
        public virtual DbSet<EmailsToAllStudents> EmailsToAllStudents { get; set; }
        public virtual DbSet<EmailsToGroupes> EmailsToGroupes { get; set; }
        public virtual DbSet<EmailstoStaff> EmailstoStaff { get; set; }
        public virtual DbSet<EmailsToStudents> EmailsToStudents { get; set; }
        public virtual DbSet<EmailToClass> EmailToClass { get; set; }
        public virtual DbSet<EmployeeCertificationTable> EmployeeCertificationTable { get; set; }
        public virtual DbSet<EmployeeEducationTable> EmployeeEducationTable { get; set; }
        public virtual DbSet<EmployeeLanguageTable> EmployeeLanguageTable { get; set; }
        public virtual DbSet<EmployeeLeavingTable> EmployeeLeavingTable { get; set; }
        public virtual DbSet<EmployeeResumeTable> EmployeeResumeTable { get; set; }
        public virtual DbSet<EmployeeSalaryTable> EmployeeSalaryTable { get; set; }
        public virtual DbSet<EmployeeSkillTable> EmployeeSkillTable { get; set; }
        public virtual DbSet<EmployeeWorkExperienceTable> EmployeeWorkExperienceTable { get; set; }
        public virtual DbSet<EventTable> EventTable { get; set; }
        public virtual DbSet<ExamMarksTable> ExamMarksTable { get; set; }
        public virtual DbSet<ExamTable> ExamTable { get; set; }
        public virtual DbSet<ExamTime> ExamTime { get; set; }
        public virtual DbSet<ExpensesTable> ExpensesTable { get; set; }
        public virtual DbSet<ExpenseTypeTable> ExpenseTypeTable { get; set; }
        public virtual DbSet<GroupeTable> GroupeTable { get; set; }
        public virtual DbSet<HomeWorkTable> HomeWorkTable { get; set; }
        public virtual DbSet<HomeWorkTypeTable> HomeWorkTypeTable { get; set; }
        public virtual DbSet<ProgrameSessionTable> ProgrameSessionTable { get; set; }
        public virtual DbSet<ProgrameTable> ProgrameTable { get; set; }
        public virtual DbSet<SchoolLeavingTable> SchoolLeavingTable { get; set; }
        public virtual DbSet<SectionTable> SectionTable { get; set; }
        public virtual DbSet<SessionTable> SessionTable { get; set; }
        public virtual DbSet<StaffAbsence> StaffAbsence { get; set; }
        public virtual DbSet<StaffAttendanceTable> StaffAttendanceTable { get; set; }
        public virtual DbSet<StaffTable> StaffTable { get; set; }
        public virtual DbSet<StudentPromotTable> StudentPromotTable { get; set; }
        public virtual DbSet<StudentTable> StudentTable { get; set; }
        public virtual DbSet<SubjectTable> SubjectTable { get; set; }
        public virtual DbSet<SubmissionFeeTable> SubmissionFeeTable { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TimeTblTable> TimeTblTable { get; set; }
        public virtual DbSet<UserTable> UserTable { get; set; }
        public virtual DbSet<UserTypeTable> UserTypeTable { get; set; }
        public virtual DbSet<VideoTable> VideoTable { get; set; }
        public virtual DbSet<v_AllUsers> v_AllUsers { get; set; }
        public virtual DbSet<v_HomeWorks> v_HomeWorks { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
